#!/bin/bash
#
# /usr/bin/iris_ctl -- Script for initializing and updating IRIS
#
# Copyright (C) 2012-2021  Minnesota Department of Transportation
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

function check_initialized() {
	if [ -r /etc/iris/iris-server.keystore ]; then
		echo "/etc/iris/iris-server.keystore already exists."
		exit 1
	fi
	if [ -r /etc/iris/iris-client.keystore ]; then
		echo "/etc/iris/iris-client.keystore already exists."
		exit 1
	fi
	return 0
}

function update_client_properties() {
	echo "Updating client properties"
	host=`hostname -f`
	p_client=/etc/iris/iris-client.properties
	sed -i ''s,.*keystore.file=.*,keystore.file=http://$host/iris-client/iris-client.keystore,'' $p_client
	sed -i ''s,.*sonar.host=.*,sonar.host=$host,'' $p_client
}

function create_keystores() {
	echo "Creating IRIS keystores"
	k_pws=`head -c8 < /dev/random | base64`
	k_pwc=`head -c8 < /dev/random | base64`
	k_opts="-noprompt -alias iris-sonar"
	k_cert=/etc/iris/iris-sonar-public.cert
	k_server=/etc/iris/iris-server.keystore
	k_client=/etc/iris/iris-client.keystore
	k_sopts="$k_opts -keystore $k_server -storetype JKS -storepass $k_pws -keypass $k_pws"
	k_copts="$k_opts -keystore $k_client -storetype JKS -storepass $k_pwc -keypass $k_pwc"
	k_gopts="-genkeypair -keyalg RSA -keysize 2048 -validity 1825"
	d_name="CN=iris_ctl"
	umask 0037
	/usr/bin/rm -f $k_cert $k_server $k_client
	/usr/bin/keytool $k_sopts $k_gopts -dname "$d_name"
	/usr/bin/keytool $k_sopts -export -file $k_cert
	/usr/bin/keytool $k_copts -import -file $k_cert
	chown tms.tms $k_server $k_cert $k_client
	p_server=/etc/iris/iris-server.properties
	p_client=/etc/iris/iris-client.properties
	sed_s="s:.*keystore.password=.*:keystore.password=$k_pws:"
	sed_c="s:.*keystore.password=.*:keystore.password=$k_pwc:"
	sed -i ''$sed_s'' $p_server
	sed -i ''$sed_c'' $p_client
}

function init_db() {
	echo "Initializing PostgreSQL database"
	umask 0077
	pwd_file=/var/lib/pgsql/.pgpass
	pg_pwd=`head -c8 < /dev/random | base64`
	echo $pg_pwd > $pwd_file
	echo "*:*:*:postgres:$pg_pwd" >> $pwd_file
	chown postgres.postgres $pwd_file
	su --login postgres -c "initdb -A password --pwfile $pwd_file"
	pg_conf=/var/lib/pgsql/data/postgresql.conf
	echo "#" >> $pg_conf
	echo "# Settings for IRIS osm schema" >> $pg_conf
	echo "maintenance_work_mem = 256MB" >> $pg_conf
	echo "temp_buffers = 128MB" >> $pg_conf
	systemctl enable postgresql.service
	systemctl start postgresql.service
}

function create_earthwyrm_database() {
	echo "Creating earthwyrm database"
	create_db="createdb earthwyrm; psql earthwyrm -c 'CREATE EXTENSION postgis;'"
	su --login postgres -c "$create_db"
}

function create_tms_user() {
	echo "Creating the tms db user"
	tms_pwd=`head -c8 < /dev/random | base64`
	p_server=/etc/iris/iris-server.properties
	sed_p="s:.*db.password=.*:db.password=$tms_pwd:"
	sed -i ''$sed_p'' $p_server
	create_user='echo "CREATE USER tms NOSUPERUSER NOCREATEDB NOCREATEROLE PASSWORD '\'$tms_pwd\''" | psql'
	su --login postgres -c "$create_user"
}

function create_tms_database() {
	echo "Creating tms database"
	create_db="createdb tms; psql tms -f /var/lib/iris/sql/tms-template.sql; psql tms -f /var/lib/iris/sql/fonts/07_char.sql -f /var/lib/iris/sql/fonts/07_line.sql -f /var/lib/iris/sql/fonts/08_full.sql -f /var/lib/iris/sql/fonts/09_full.sql -f /var/lib/iris/sql/fonts/10_full.sql -f /var/lib/iris/sql/fonts/11_full.sql -f /var/lib/iris/sql/fonts/12_full.sql -f /var/lib/iris/sql/fonts/13_full.sql -f /var/lib/iris/sql/fonts/14_full.sql -f /var/lib/iris/sql/fonts/15_full.sql -f /var/lib/iris/sql/fonts/16_full.sql -f /var/lib/iris/sql/fonts/18_full.sql -f /var/lib/iris/sql/fonts/20_full.sql -f /var/lib/iris/sql/fonts/24_full.sql -f /var/lib/iris/sql/fonts/26_full.sql"
	su --login postgres -c "$create_db"
}

function configure_selinux() {
	echo "Configuring SELinux for nginx"
	semanage port -a -t http_port_t -p tcp 3030
	setsebool -P httpd_can_network_connect true
}

function configure_firewall() {
	echo "Configuring firewall"
	firewall-cmd --permanent --add-port=1037/tcp
	firewall-cmd --reload
}

function configure_services() {
	echo "Configuring services"
	systemctl enable nginx.service
	systemctl start nginx.service
	systemctl enable iris.service
}

function echo_success() {
	echo
	echo "Successfully initialized the IRIS server"
	echo
}

function create_links() {
	version="@@VERSION@@"
	echo "Creating IRIS links for verion $version"
	host=`hostname -f`
	ln -snf /usr/share/java/iris-server/iris-server-$version.jar /usr/share/java/iris-server/iris-server.jar
	sed -i ''s,@@WEBSTART.HOST@@,$host,'' /var/www/html/iris-client/iris-client.jnlp /var/www/html/iris-client/mail.jnlp
	install -o nginx -g nginx -m 0444 /etc/iris/iris-client.keystore /var/www/html/iris-client/
	install -o nginx -g nginx -m 0444 /etc/iris/iris-client.properties /var/www/html/iris-client/
	SED_STR='3s,^,\# DO NOT EDIT -- copied from /etc/iris by iris_ctl update\n,'
	sed -i "$SED_STR" /var/www/html/iris-client/iris-client.properties
}

function update_database() {
	echo
	# FIXME: run required SQL migrate scripts
}

# Cleanup the effects of init. Can be run from source, since doesn't depend on
# java filtersets. Note: this doesn't undo string substitutions
function clean(){
	# performing in the reverse order
	enable_error_logging

	# create_links: remove jar link, assume there was no other older version it
	# 	should be linked to; remove keystores
	echo "Removing IRIS links"
	/usr/bin/rm -f /usr/share/java/iris-server/iris-server.jar
	/usr/bin/rm -f /var/www/html/iris-client/iris-client.keystore
	/usr/bin/rm -f /var/www/html/iris-client/iris-client.properties

	# configure_services: stop/disable nginx/iris; assume stopped originally
	echo "Disabling iris/nginx services"
	systemctl stop iris.service
	systemctl disable iris.service
	systemctl stop nginx.service
	systemctl disable nginx.service	
	
	# configure_firewall: remove port 1037
	echo "Removing firewall port"
	firewall-cmd --permanent --remove-port=1037/tcp
	firewall-cmd --reload

	# configure_selinux; assume network connect was disabled (default I
	# 	believe); remove the 3030 port
	echo "Removing nginx SELinux configurations"
	setsebool -P httpd_can_network_connect false
	if semanage port -l | grep "^http_port_t\s*tcp.*\s3030\(,\|$\)"; then
		semanage port -d -p tcp 3030
	fi

	if pgrep postgres; then
		# create_tms_database: drop db
		echo "Removing tms database"
		su --login postgres -c "dropdb --if-exists tms;"
		
		# create_tms_user: remove user; cap schema prevents deletion
		su --login postgres -c "psql -c 'DROP SCHEMA IF EXISTS cap;'"
		su --login postgres -c "dropuser --if-exists tms;"

		# create_earthwyrm_database: drop db
		echo "Removing earthwyrm database"
		su --login postgres -c "dropdb --if-exists earthwyrm;"
	else
		echo -e "\033[31mPostgres not running; assuming postgres cleanup has already occurred"
		echo -e "Restart postgres and rerun if this is not the case\033[0m"
	fi
	
	# init_db: remove custom IRIS postgres settings (assumes 2 lines added after comment);
	# 	disable db service, assuming stopped originally
	echo "Removing IRIS postgres settings"
	pg_conf=/var/lib/pgsql/data/postgresql.conf
	sed -i -e '/IRIS osm schema/,+2d' $pg_conf
	echo "Disabling postgres service"
	systemctl stop postgresql.service
	systemctl disable postgresql.service

	# create_keystores: remove keys
	echo "Removing keystores"
	k_cert=/etc/iris/iris-sonar-public.cert
	k_server=/etc/iris/iris-server.keystore
	k_client=/etc/iris/iris-client.keystore
	/usr/bin/rm -f $k_cert $k_server $k_client

	echo -e "\033[0;32mCleanup complete!\033[0m"
	echo "If uninstalling, you'll still need to remove the rpm package"
}

# Setup for development, to be performed after init
function dev(){
	enable_error_logging

	# ensure running in correct directory
	sprops_src=./etc/dev/iris-server.properties
	if test -f "$sprops_src"; then
		# existing dev directory already setup?
		if test -e "./dev"; then
			read -p "Existing ./dev found, do you want to overwrite (y/n)? " choice
			case "$choice" in 
				y|Y ) ;;
				* ) exit 1;;
			esac
			echo "Removing existing ./dev"
			/usr/bin/rm -rf ./dev
		fi

		echo "Copying templates"
		cp -Rp ./etc/dev ./

		# so we don't have to always stop iris service on restart during development
		echo "Disabling any installed iris service"
		systemctl stop iris.service
		systemctl disable iris.service

		echo "Copying keystores"
		k_cert=/etc/iris/iris-sonar-public.cert
		k_server=/etc/iris/iris-server.keystore
		k_client=/etc/iris/iris-client.keystore
		# should match ownership of ./dev folder
		cp -f --preserve=mode,timestamps $k_cert $k_server $k_client ./dev/
		chown --reference=./dev/iris-server.properties ./dev/*.keystore ./dev/*.cert

		echo "Copying passwords"
		keystore_pass=`sed -n 's/.*keystore\.password=\(.*\)/\1/p' /etc/iris/iris-server.properties`
		db_pass=`sed -n 's/.*db\.password=\(.*\)/\1/p' /etc/iris/iris-server.properties`
		sprops=./dev/iris-server.properties
		sed -i "s/.*keystore\.password=.*/keystore.password=$keystore_pass/" $sprops
		sed -i "s/.*db\.password=.*/db.password=$db_pass/" $sprops

		# even with db.version commented, it still seems to refuse to start if version isn't same
		# so doing this always, just to be doubly sure the server will run
		echo "Copying IRIS version number"
		iris_version=`sed -n 's/^version=\(.*\)/\1/p' ./project.properties`
		sed -i "s/.*db.version\ =\ .*/db.version\ =\ $iris_version/" ./dev/dev.cfg

		echo -e "\033[0;32mSetup complete!\033[0m"
		# TODO: logs for sonar, sonar_tls, sonar_task, sonar_time?
	else
		echo "Expected $sprops_src file. Try running from the iris root code directory."
		exit 1
	fi
}

function enable_error_logging(){
	# exit when any command fails
	set -e
	# keep track of the last executed command
	trap 'last_command=$current_command; current_command=$BASH_COMMAND' DEBUG
	# echo an error message before exiting
	trap log_error EXIT
}
function log_error(){
	exit_code=$?
    if [ $exit_code -ne 0 ]; then
		echo -e "\033[31m"
        echo "\"${last_command}\" command failed with exit code ${exit_code}."
		echo -e "\033[0m"
        exit $exit_code
	fi
}

case "$1" in
	init)
		check_initialized
		update_client_properties
		create_keystores
		init_db
		create_earthwyrm_database
		create_tms_user
		create_tms_database
		configure_selinux
		configure_firewall
		configure_services
		create_links
		echo_success
		;;
	cert)
		create_keystores
		;;
	update)
		create_links
		update_database
		;;
	clean)
		clean
		;;
	dev)
		dev
		;;
	*)
		echo $"Usage: $0 {init|update|clean}"
		exit 1
esac
